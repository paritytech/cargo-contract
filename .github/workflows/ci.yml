name: ci
on:
  pull_request:
  push:
    branches:
      - master
    tags:
      - v*
    paths-ignore:
      - 'README.md'
      - 'CHANGELOG.md'
jobs:
  fmt:
    runs-on: ubuntu-latest
    steps:
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          default: true
          components: rustfmt

      - name: Checkout
        uses: actions/checkout@v3

      - name: Check Formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --check

  check:
    runs-on: ubuntu-latest
    steps:
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - name: Cache
        uses: Swatinem/rust-cache@v2

      - name: Checkout
        uses: actions/checkout@v3

      - name: Check each crate
        run: |
          for crate in ./crates/*/; do
            echo "Checking $crate";
            cargo check --manifest-path ${crate}/Cargo.toml;
          done

  clippy:
    runs-on: ubuntu-latest
    steps:
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          default: true
          components: clippy

      - name: Cache
        uses: Swatinem/rust-cache@v2

      - name: Checkout
        uses: actions/checkout@v3

        # Check permissions of GITHUB_TOKEN, workaround for permission issues
        # with @dependabot PRs. See https://github.com/actions-rs/clippy-check/issues/2#issuecomment-807878478
      - name: Check workflow permissions
        id: check_permissions
        uses: scherermichael-oss/action-has-permission@1.0.6
        with:
          required-permission: write
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clippy with features
        uses: actions-rs/clippy-check@v1
        if: ${{ steps.check_permissions.outputs.has-permission }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --profile debug-ci --all-features --all-targets -- -D warnings

      - name: Clippy without features
        if: ${{ steps.check_permissions.outputs.has-permission }}
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --profile debug-ci --all-targets -- -D warnings

        # Runs if the GITHUB_TOKEN does not have `write` permissions e.g. @dependabot
      - name: Clippy with features (no annotations)
        if: ${{ !steps.check_permissions.outputs.has-permission }}
        run: cargo clippy --profile debug-ci --all-features --all-targets -- -D warnings

        # Runs if the GITHUB_TOKEN does not have `write` permissions e.g. @dependabot
      - name: Clippy without features (no annotations)
        if: ${{ !steps.check_permissions.outputs.has-permission }}
        run: cargo clippy --profile debug-ci --all-targets -- -D warnings

  test:
    strategy:
      fail-fast: false
      matrix:
        # We want newer versions than 'latest' here to have current wasm-opt
        os: ["ubuntu-22.04", "macos-12", "windows-2022"]
    runs-on: ${{ matrix.os }}
    env:
      RUST_BACKTRACE: full
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          default: true
          target: wasm32-unknown-unknown
          components: rust-src

      - name: Cache
        uses: Swatinem/rust-cache@v2

      - name: Install latest `substrate-contracts-node` binary and run tests
        if: runner.os == 'Linux'
        run: |
          curl -L -o substrate-contracts-node.zip 'https://gitlab.parity.io/parity/mirrors/substrate-contracts-node/-/jobs/artifacts/main/download?job=build-linux' && \
          unzip substrate-contracts-node.zip && \
          chmod +x artifacts/substrate-contracts-node-linux/substrate-contracts-node &&
          cargo test --profile debug-ci --all-features -- --test-threads=1 &

      - name: Install latest `substrate-contracts-node` binary and run tests
        if: runner.os == 'macOS'
        run: |
          curl -L -o substrate-contracts-node.zip 'https://gitlab.parity.io/parity/mirrors/substrate-contracts-node/-/jobs/artifacts/main/download?job=build-mac' && \
          unzip substrate-contracts-node.zip && \
          chmod +x artifacts/substrate-contracts-node-mac/substrate-contracts-node &&
          cargo test --profile debug-ci --all-features -- --test-threads=1 &    


  template:
    strategy:
      fail-fast: false
      matrix:
        # We want newer versions than 'latest' here to have current wasm-opt
        os: ["ubuntu-22.04", "macos-12", "windows-2022"]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          default: true
          target: wasm32-unknown-unknown
          components: rust-src

      - name: Cache
        uses: Swatinem/rust-cache@v2

      - name: Check Template
        run: >-
          cargo -vV &&
          cargo run --profile debug-ci -- contract --version &&
          cargo run --profile debug-ci -- contract new --target-dir ${{ runner.temp }} foobar &&
          cargo run --profile debug-ci -- contract build --manifest-path=${{ runner.temp }}/foobar/Cargo.toml &&
          cargo run --profile debug-ci -- contract check --manifest-path=${{ runner.temp }}/foobar/Cargo.toml &&
          cargo run --profile debug-ci -- contract build --manifest-path=${{ runner.temp }}/foobar/Cargo.toml --release
